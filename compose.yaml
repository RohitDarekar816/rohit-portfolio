# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  # Development service - default
  server:
    build:
      context: .
      target: dev
    ports:
      - "${APP_PORT:-8000}:8000"
    volumes:
      # Mount source for development
      - ./:/var/www/project
      - ./vendor:/var/www/project/vendor
    environment:
      - APP_ENV=dev
      - DATABASE_URL=${DATABASE_URL:-postgresql://app:!ChangeMe!@database:5432/app?serverVersion=16&charset=utf8}
    depends_on:
      database:
        condition: service_healthy
  
  # Production service - use with "docker compose --profile prod up"
  server-prod:
    profiles:
      - prod
    build:
      context: .
      target: prod
    ports:
      - "${APP_PORT:-80}:80"
    environment:
      - APP_ENV=prod
      - DATABASE_URL=${DATABASE_URL:-postgresql://app:!ChangeMe!@database:5432/app?serverVersion=16&charset=utf8}
    depends_on:
      database:
        condition: service_healthy

  # PostgreSQL Database
  database:
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=!ChangeMe!
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "app"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

